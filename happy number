//写两层循环。外层用来控制平方和<10，内层进行将每一位分离
class Solution {
public:
    int single;
    int result=100;
    bool isHappy(int n) {
      //这里限定了循环次数，因为没有很好的办法判断循环中止
      for (int i=0; i<20; n=result,i++){
      result=0;
      
      while(n!=0){
      single=n%10;
      n=n/10;
      result+=single*single;
      }
      
      if(result==1) {return true;break;}
      }
      return false;
      
    }
};
/*/算法改进
//happy number关于终止时候的判断，如果为1，那么不论怎么循环下一个结果都是1，用两个函数来进行调用，一个速度快，一个速度慢
int digitSquareSum(int n) {
    int sum = 0, tmp;
    while (n) {
        tmp = n % 10;
        sum += tmp * tmp;
        n /= 10;
    }
    return sum;
}

bool isHappy(int n) {
    int slow, fast;
    slow = fast = n;
    do {
        slow = digitSquareSum(slow);
        fast = digitSquareSum(fast);
        fast = digitSquareSum(fast);
    } while(slow != fast);
    if (slow == 1) return 1;
    else return 0;
}
*/
